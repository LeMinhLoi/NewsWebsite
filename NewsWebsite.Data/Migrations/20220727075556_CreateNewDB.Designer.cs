// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NewsWebsite.Data.EF;

namespace NewsWebsite.Data.Migrations
{
    [DbContext(typeof(WebsiteDBContext))]
    [Migration("20220727075556_CreateNewDB")]
    partial class CreateNewDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("f2c7b584-2bec-4a0c-896b-0aae5084afe0"),
                            RoleId = new Guid("68f98061-01ba-4263-ab94-65a0cb908ab7")
                        },
                        new
                        {
                            UserId = new Guid("135cc273-c797-480f-ac39-cabfde885094"),
                            RoleId = new Guid("3f2be8b9-769d-49f5-8387-f34413daa629")
                        },
                        new
                        {
                            UserId = new Guid("4008d551-f305-4bc5-b143-6caa9e7e6acb"),
                            RoleId = new Guid("e2189174-217b-4540-9563-49f24a901712")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens");
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Announcements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c794979-ac1a-45f2-92e7-a6f0e0ef2604"),
                            Content = "Bạn cần kiểm duyệt bài viết bây giờ",
                            DateTime = new DateTime(2022, 10, 15, 4, 3, 4, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2b38ab59-ac01-4a2a-8aae-772d258d6fba"),
                            Content = "Bài viết của bạn không được chấp nhận.",
                            DateTime = new DateTime(2022, 10, 15, 4, 3, 4, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.AnnouncementInUser", b =>
                {
                    b.Property<Guid>("IdAnnouncement")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsViewed")
                        .HasColumnType("bit");

                    b.HasKey("IdAnnouncement", "IdUser");

                    b.HasIndex("IdUser");

                    b.ToTable("AnnouncementInUsers");

                    b.HasData(
                        new
                        {
                            IdAnnouncement = new Guid("0c794979-ac1a-45f2-92e7-a6f0e0ef2604"),
                            IdUser = new Guid("f2c7b584-2bec-4a0c-896b-0aae5084afe0"),
                            IsViewed = false
                        },
                        new
                        {
                            IdAnnouncement = new Guid("2b38ab59-ac01-4a2a-8aae-772d258d6fba"),
                            IdUser = new Guid("135cc273-c797-480f-ac39-cabfde885094"),
                            IsViewed = false
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.Catalog", b =>
                {
                    b.Property<int>("IdCatalog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCatalog");

                    b.ToTable("Catalogs");

                    b.HasData(
                        new
                        {
                            IdCatalog = 1,
                            Description = "Đây là mục thể thao",
                            Name = "Thể thao"
                        },
                        new
                        {
                            IdCatalog = 2,
                            Description = "Đây là mục chính trị",
                            Name = "Chính trị"
                        },
                        new
                        {
                            IdCatalog = 3,
                            Description = "Đây là mục trong nước",
                            Name = "Trong nước"
                        },
                        new
                        {
                            IdCatalog = 4,
                            Description = "Đây là mục quân sự",
                            Name = "Quân sự"
                        },
                        new
                        {
                            IdCatalog = 5,
                            Description = "Đây là mục thế giới",
                            Name = "Thế giới"
                        },
                        new
                        {
                            IdCatalog = 6,
                            Description = "Đây là mục kinh tế",
                            Name = "Kinh tế"
                        },
                        new
                        {
                            IdCatalog = 7,
                            Description = "Đây là mục môi trường",
                            Name = "Môi trường"
                        },
                        new
                        {
                            IdCatalog = 8,
                            Description = "Đây là mục văn hóa",
                            Name = "Văn hóa"
                        },
                        new
                        {
                            IdCatalog = 9,
                            Description = "Đây là mục pháp luật",
                            Name = "Pháp luật"
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.CatalogInUser", b =>
                {
                    b.Property<int>("IdCatalog")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdCatalog", "IdUser");

                    b.HasIndex("IdUser");

                    b.ToTable("CatalogInUsers");

                    b.HasData(
                        new
                        {
                            IdCatalog = 1,
                            IdUser = new Guid("135cc273-c797-480f-ac39-cabfde885094")
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("DateComment")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdNews")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdNews");

                    b.HasIndex("IdUser");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Chị bảy mãi đỉnh",
                            DateComment = new DateTime(2022, 10, 15, 5, 3, 4, 0, DateTimeKind.Unspecified),
                            IdNews = new Guid("6d26e9ea-3b32-44be-ac21-090c06bbf14e"),
                            IdUser = new Guid("4008d551-f305-4bc5-b143-6caa9e7e6acb")
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NameFunc")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Functions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Đây là chức năng thêm",
                            NameFunc = "Thêm"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Đây là chức năng sửa",
                            NameFunc = "Sửa"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Đây là chức năng xóa",
                            NameFunc = "Xóa"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Đây là chức năng xem",
                            NameFunc = "Xem"
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.HistoryLike", b =>
                {
                    b.Property<Guid>("IdNews")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateLike")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.HasKey("IdNews", "IdUser");

                    b.HasIndex("IdUser");

                    b.ToTable("HistoryLikes");

                    b.HasData(
                        new
                        {
                            IdNews = new Guid("6d26e9ea-3b32-44be-ac21-090c06bbf14e"),
                            IdUser = new Guid("4008d551-f305-4bc5-b143-6caa9e7e6acb"),
                            DateLike = new DateTime(2022, 10, 15, 7, 3, 4, 0, DateTimeKind.Unspecified),
                            IsLike = true
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.HistoryView", b =>
                {
                    b.Property<Guid>("IdNews")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateView")
                        .HasColumnType("datetime2");

                    b.HasKey("IdNews", "IdUser");

                    b.HasIndex("IdUser");

                    b.ToTable("HistoryViews");

                    b.HasData(
                        new
                        {
                            IdNews = new Guid("6d26e9ea-3b32-44be-ac21-090c06bbf14e"),
                            IdUser = new Guid("4008d551-f305-4bc5-b143-6caa9e7e6acb"),
                            DateView = new DateTime(2022, 10, 15, 4, 3, 4, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.ImageInNews", b =>
                {
                    b.Property<Guid>("IdNews")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdImageNews")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("IdNews", "IdImageNews");

                    b.HasIndex("IdImageNews");

                    b.ToTable("ImageInNewss");

                    b.HasData(
                        new
                        {
                            IdNews = new Guid("6d26e9ea-3b32-44be-ac21-090c06bbf14e"),
                            IdImageNews = new Guid("522f6338-202b-4409-b3b5-bac401a94b02"),
                            Order = 0
                        },
                        new
                        {
                            IdNews = new Guid("6d26e9ea-3b32-44be-ac21-090c06bbf14e"),
                            IdImageNews = new Guid("23bc1330-bbc6-4e22-b3da-b0b3ace9e2fd"),
                            Order = 0
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.ImageNews", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ImageNewss");

                    b.HasData(
                        new
                        {
                            Id = new Guid("522f6338-202b-4409-b3b5-bac401a94b02"),
                            Description = "Description is Description!",
                            IsDefault = true,
                            Path = "themes/images/images_news/leminhloi.png"
                        },
                        new
                        {
                            Id = new Guid("23bc1330-bbc6-4e22-b3da-b0b3ace9e2fd"),
                            Description = "Description is Description!",
                            IsDefault = false,
                            Path = "themes/images/images_news/leminhloi1.png"
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.ImageUser", b =>
                {
                    b.Property<Guid>("IdImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdImage");

                    b.ToTable("ImageUsers");

                    b.HasData(
                        new
                        {
                            IdImage = new Guid("0619e3c9-a3ba-46ca-ba72-1136c388d003"),
                            Path = "/themes/images/images_user/leminhloi.png"
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.News", b =>
                {
                    b.Property<Guid>("IdNews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdAuthor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAccept")
                        .HasColumnType("bit");

                    b.Property<string>("Tittle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("IdNews");

                    b.ToTable("Newss");

                    b.HasData(
                        new
                        {
                            IdNews = new Guid("6d26e9ea-3b32-44be-ac21-090c06bbf14e"),
                            Content = "<p><b>Hi! Đây là một bài báo viết về thể thao.</b></p><p><u>Chị bảy đang chuồn khỏi MU</u></p>",
                            DateCreate = new DateTime(2022, 10, 10, 2, 3, 4, 0, DateTimeKind.Unspecified),
                            IdAuthor = new Guid("135cc273-c797-480f-ac39-cabfde885094"),
                            IsAccept = false,
                            Tittle = "SƯ TRỐN CHẠY",
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.NewsInCatalog", b =>
                {
                    b.Property<int>("IdCatalog")
                        .HasColumnType("int");

                    b.Property<Guid>("IdNews")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdCatalog", "IdNews");

                    b.HasIndex("IdNews");

                    b.ToTable("NewsInCatalogs");

                    b.HasData(
                        new
                        {
                            IdCatalog = 1,
                            IdNews = new Guid("6d26e9ea-3b32-44be-ac21-090c06bbf14e")
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.Permission", b =>
                {
                    b.Property<int>("IdRoleFunc")
                        .HasColumnType("int");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdRoleFunc", "IdUser");

                    b.HasIndex("IdUser");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            IdRoleFunc = 4,
                            IdUser = new Guid("135cc273-c797-480f-ac39-cabfde885094")
                        },
                        new
                        {
                            IdRoleFunc = 1,
                            IdUser = new Guid("135cc273-c797-480f-ac39-cabfde885094")
                        },
                        new
                        {
                            IdRoleFunc = 4,
                            IdUser = new Guid("f2c7b584-2bec-4a0c-896b-0aae5084afe0")
                        },
                        new
                        {
                            IdRoleFunc = 3,
                            IdUser = new Guid("f2c7b584-2bec-4a0c-896b-0aae5084afe0")
                        },
                        new
                        {
                            IdRoleFunc = 2,
                            IdUser = new Guid("f2c7b584-2bec-4a0c-896b-0aae5084afe0")
                        },
                        new
                        {
                            IdRoleFunc = 1,
                            IdUser = new Guid("f2c7b584-2bec-4a0c-896b-0aae5084afe0")
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.ReportComment", b =>
                {
                    b.Property<int>("IDReportComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentReport")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateReport")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdComment")
                        .HasColumnType("int");

                    b.Property<Guid>("IdReporter")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IDReportComment");

                    b.HasIndex("IdReporter");

                    b.ToTable("ReportComments");

                    b.HasData(
                        new
                        {
                            IDReportComment = 1,
                            ContentReport = "Comment gay war, xoa no di!",
                            DateReport = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdComment = 1,
                            IdReporter = new Guid("135cc273-c797-480f-ac39-cabfde885094")
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.RoleFunc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("IdFunc")
                        .HasColumnType("int");

                    b.Property<Guid>("IdRole")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IdFunc");

                    b.HasIndex("IdRole");

                    b.ToTable("RoleFuncs");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            IdFunc = 4,
                            IdRole = new Guid("68f98061-01ba-4263-ab94-65a0cb908ab7")
                        },
                        new
                        {
                            Id = 1,
                            IdFunc = 1,
                            IdRole = new Guid("68f98061-01ba-4263-ab94-65a0cb908ab7")
                        },
                        new
                        {
                            Id = 2,
                            IdFunc = 2,
                            IdRole = new Guid("68f98061-01ba-4263-ab94-65a0cb908ab7")
                        },
                        new
                        {
                            Id = 3,
                            IdFunc = 3,
                            IdRole = new Guid("68f98061-01ba-4263-ab94-65a0cb908ab7")
                        },
                        new
                        {
                            Id = 4,
                            IdFunc = 1,
                            IdRole = new Guid("3f2be8b9-769d-49f5-8387-f34413daa629")
                        },
                        new
                        {
                            Id = 5,
                            IdFunc = 4,
                            IdRole = new Guid("3f2be8b9-769d-49f5-8387-f34413daa629")
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<Guid?>("IdImageAvatar")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("IdImageAvatar")
                        .IsUnique()
                        .HasFilter("[IdImageAvatar] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2c7b584-2bec-4a0c-896b-0aae5084afe0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4bbc029-0b38-4bb8-bbe3-7fe76cc2b69e",
                            DoB = new DateTime(2001, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "loileminh@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Lợi",
                            Gender = true,
                            IdImageAvatar = new Guid("0619e3c9-a3ba-46ca-ba72-1136c388d003"),
                            IsActive = true,
                            LastName = "Lê Minh",
                            LockoutEnabled = false,
                            NickName = "leminhloi",
                            NormalizedUserName = "leminhloi",
                            PasswordHash = "AQAAAAEAACcQAAAAEH6shzjDWTqc7jQBKgJ4gA3jKxO0Bpr6mhJmBV8Dt4BnwYpXyzzTL3lgfKaCkRbbwQ==",
                            PhoneNumber = "1000000001",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "leminhloi"
                        },
                        new
                        {
                            Id = new Guid("135cc273-c797-480f-ac39-cabfde885094"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "632608a7-abe3-4480-8267-7001274d739e",
                            DoB = new DateTime(2001, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "huynhnhat@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nhật",
                            Gender = true,
                            IsActive = true,
                            LastName = "Huỳnh",
                            LockoutEnabled = false,
                            NickName = "naruto",
                            NormalizedUserName = "nhathuynh",
                            PasswordHash = "AQAAAAEAACcQAAAAENW6V8tBbYpwaagyCkjTUsG0Fj1iRSVBQqik/c8KglTxNsjbkpsPM56hl50Yygo//g==",
                            PhoneNumber = "1000000002",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "nhathuynh"
                        },
                        new
                        {
                            Id = new Guid("4008d551-f305-4bc5-b143-6caa9e7e6acb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "527e50c7-9f09-4d75-9a87-e07f34b955b4",
                            DoB = new DateTime(2001, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "daiphuoc@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Đại Phước",
                            Gender = true,
                            IsActive = true,
                            LastName = "Dương",
                            LockoutEnabled = false,
                            NickName = "sasuke",
                            NormalizedUserName = "phuochuynh",
                            PasswordHash = "AQAAAAEAACcQAAAAEFXHYDQxpIcyg1R45g5ncGscfgwIwvZ4DIuYbRMkreEXdEb8szLa3NNCrGj6XleGzA==",
                            PhoneNumber = "1000000003",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "phuochuynh"
                        });
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.WebRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("WebRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("68f98061-01ba-4263-ab94-65a0cb908ab7"),
                            ConcurrencyStamp = "ba3973d4-25e5-410e-b610-bdacc14ae2c0",
                            Description = "Đây là manger",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = new Guid("e2189174-217b-4540-9563-49f24a901712"),
                            ConcurrencyStamp = "b34dbfa9-712b-46db-b8a1-56f214a8607c",
                            Description = "Đây là Viewer",
                            Name = "Viewer",
                            NormalizedName = "Viewer"
                        },
                        new
                        {
                            Id = new Guid("3f2be8b9-769d-49f5-8387-f34413daa629"),
                            ConcurrencyStamp = "8c39b333-f707-41d1-9866-371faf3ad745",
                            Description = "Đây là Blogger",
                            Name = "Blogger",
                            NormalizedName = "Blogger"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.WebRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.WebRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsWebsite.Data.Entities.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.UserInfo", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.AnnouncementInUser", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.Announcement", "Announcement")
                        .WithMany("AnnouncementInUsers")
                        .HasForeignKey("IdAnnouncement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsWebsite.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("AnnouncementInUsers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.CatalogInUser", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.Catalog", "Catalog")
                        .WithMany("CatalogInUsers")
                        .HasForeignKey("IdCatalog")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsWebsite.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("CatalogInUsers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.Comment", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.News", "News")
                        .WithMany("Comments")
                        .HasForeignKey("IdNews")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsWebsite.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Comments")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.HistoryLike", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.News", "News")
                        .WithMany("HistoryLikes")
                        .HasForeignKey("IdNews")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsWebsite.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("HistoryLikes")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.HistoryView", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.News", "News")
                        .WithMany("HistoryViews")
                        .HasForeignKey("IdNews")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsWebsite.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("HistoryViews")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.ImageInNews", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.ImageNews", "ImageNews")
                        .WithMany("ImageInNewss")
                        .HasForeignKey("IdImageNews")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsWebsite.Data.Entities.News", "News")
                        .WithMany("ImageInNews")
                        .HasForeignKey("IdNews")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.NewsInCatalog", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.Catalog", "Catalog")
                        .WithMany("NewsInCatalogs")
                        .HasForeignKey("IdCatalog")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsWebsite.Data.Entities.News", "News")
                        .WithMany("NewsInCatalogs")
                        .HasForeignKey("IdNews")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.Permission", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.RoleFunc", "RoleFunc")
                        .WithMany("Permissions")
                        .HasForeignKey("IdRoleFunc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsWebsite.Data.Entities.UserInfo", "UserInfo")
                        .WithMany("Permissions")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.ReportComment", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.UserInfo", "Reporter")
                        .WithMany("ReportComments")
                        .HasForeignKey("IdReporter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.RoleFunc", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.Function", "Function")
                        .WithMany("RoleFuncs")
                        .HasForeignKey("IdFunc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NewsWebsite.Data.Entities.WebRole", "Role")
                        .WithMany("RoleFuncs")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NewsWebsite.Data.Entities.UserInfo", b =>
                {
                    b.HasOne("NewsWebsite.Data.Entities.Comment", null)
                        .WithMany("UserInfos")
                        .HasForeignKey("CommentId");

                    b.HasOne("NewsWebsite.Data.Entities.ImageUser", "ImageUser")
                        .WithOne("UserInfo")
                        .HasForeignKey("NewsWebsite.Data.Entities.UserInfo", "IdImageAvatar");
                });
#pragma warning restore 612, 618
        }
    }
}
